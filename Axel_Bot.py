

import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command

# üîë –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7987484184:AAE6t7YiCDpb7dhyY4pugJdrh9KRCdq-IQk"

# üìä –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
CRYPTO_LIST = ["BTCUSDT", "TONUSDT", "ETHUSDT", "SOLUSDT", "USDTUSDT"]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üß† –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_choices = {}        # user_id ‚Üí "BTCUSDT"
previous_prices = {}     # user_id ‚Üí –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç—ã


# üßæ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton(text="üí∞ –í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="choose_crypto")]
        ]
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫.\n\n"
        "üîπ –ù–∞–∂–º–∏ *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞*, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã.\n"
        "üîπ –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å üìà",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# ‚öôÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="‚Çø Bitcoin (BTC)", callback_data="BTCUSDT")],
        [InlineKeyboardButton(text="üíé Toncoin (TON)", callback_data="TONUSDT")],
        [InlineKeyboardButton(text="Œû Ethereum (ETH)", callback_data="ETHUSDT")],
        [InlineKeyboardButton(text="üåû Solana (SOL)", callback_data="SOLUSDT")],
        [InlineKeyboardButton(text="üíµ Tether (USDT)", callback_data="USDTUSDT")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# üîò –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç—É"
@dp.callback_query(F.data == "choose_crypto")
async def choose_crypto(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å üëá",
        reply_markup=get_crypto_keyboard()
    )


# ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data.in_(CRYPTO_LIST))
async def select_crypto(callback: CallbackQuery):
    user_id = callback.from_user.id
    crypto = callback.data

    user_choices[user_id] = crypto
    previous_prices[user_id] = None

    await callback.answer()
    await callback.message.edit_text(
        f"‚úÖ –¢–µ–ø–µ—Ä—å —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é *{crypto.replace('USDT', '')}*.\n"
        "–ë—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1% üìàüìâ",
        parse_mode="Markdown"
    )


# üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω
async def get_all_prices():
    url = "https://api.binance.com/api/v3/ticker/price"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()

    result = {}
    for item in data:
        if item["symbol"] in CRYPTO_LIST:
            result[item["symbol"]] = float(item["price"])
    return result


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç—ã
async def get_price(symbol: str):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
    return float(data["price"])


# üìä –ö–Ω–æ–ø–∫–∞ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
@dp.callback_query(F.data == "analytics")
async def analytics_callback(callback: CallbackQuery):
    await callback.answer()
    prices = await get_all_prices()

    text = "üìä *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n\n"
    for symbol, price in prices.items():
        name = symbol.replace("USDT", "")
        text += f"‚Ä¢ {name}: `{price:.2f}$`\n"

    text += "\nüîÑ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics")],
            [InlineKeyboardButton(text="üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", callback_data="choose_crypto")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)


# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def price_monitor():
    print("üîÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
    while True:
        for user_id, symbol in list(user_choices.items()):
            try:
                current_price = await get_price(symbol)
                old_price = previous_prices.get(user_id)

                if old_price is not None:
                    change = ((current_price - old_price) / old_price) * 100
                    if abs(change) >= 1:
                        direction = "üìà –≤—ã—Ä–æ—Å–ª–∞" if change > 0 else "üìâ —É–ø–∞–ª–∞"
                        msg = (
                            f"üí∞ *{symbol.replace('USDT', '')}* {direction} –Ω–∞ {abs(change):.2f}%\n"
                            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f}$`"
                        )
                        await bot.send_message(user_id, msg, parse_mode="Markdown")

                previous_prices[user_id] = current_price
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {symbol}: {e}")

        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.create_task(price_monitor())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
